#Estadistica descriptiva
import csv
import statistics
#Para leer los archivos
import pandas as pd
#Para Machine Learning
import numpy as np
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
#Graficamos
import matplotlib.pyplot as plt
opcion=0
#Guardar nombre de los archivos en variables
archivo_entrada = 'shipping_ecommerce.csv'
archivo_salida = 'Datos_nuevos.csv'
archivo_datos = 'Datos Predecidos.csv'
#Nombre de las columnas
llamada = 'Customer_care_calls'
valoracion = 'Customer_rating'
compras = 'Prior_purchases'
descuento = 'Discount_offered'
peso = 'Weight_in_gms'
genero= 'Gender'
Clase='Class'
importancia='Product_importance'
bloque='Warehouse_block'
envio='Mode_of_Shipment'


Lista = [llamada, valoracion, compras, descuento, peso]
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Integrantes: Daniel Martinez - Joaquin Oryarzun - Thiare Villagran.
Asignaura: Inferencia y procesos estocasticos.
Seccion: 411.
Base de datos: https://www.kaggle.com/datasets/ulrikthygepedersen/shipping-ecommerce
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
#Estadistica descriptiva
#Valor maximo de los datos
def valor_max(dato):
  antesesor = 0.0;
  with open(archivo_entrada) as ship:
    ad = csv.DictReader(ship)              
    for item in ad:
      actual = float(item[dato])
      if(actual >= antesesor):
        antesesor = actual
    print ("El valor maximo de", antesesor)


#Valor minimo de los datos
def valor_min(dato):
  antesesor = 5000000.0;
  with open(archivo_entrada) as ship:
    ad = csv.DictReader(ship)              
    for item in ad:
      actual = float(item[dato])
      if(actual <= antesesor):
        antesesor = actual
    print ("El valor minimo es:", antesesor)


#Media / promedio de los datos
def promedio(dato):
  lista = []
  with open(archivo_entrada) as ship:
    ad = csv.DictReader(ship)
    for item in ad:
      actual = float(item[dato])
      lista.append(actual)
    promedio = statistics.mean(lista)
    print ("El valor del promedio es:", promedio)


#Mediana de los datos
def mediana(dato):
  lista = []
  with open(archivo_entrada) as ship:
    ad = csv.DictReader(ship)
    for item in ad:
      actual = float(item[dato])
      lista.append(actual)
    print("El valor de la mediana es: ", statistics.median(lista))


#Varianza de los datos
def varianza(dato):
  lista = []
  with open(archivo_entrada) as ship:
    ad = csv.DictReader(ship)
    for item in ad:
      actual = float(item[dato])
      lista.append(actual)
    varianza = statistics.variance(lista)
    print("El valor de la varianza es:", varianza)


#Moda de los datos
def moda(dato):
  lista = []
  with open(archivo_entrada) as ship:
    ad = csv.DictReader(ship)
    for item in ad:
      actual = float(item[dato])
      lista.append(actual)
    moda = statistics.mode(lista)
    print("El valor de la moda es:", moda)


#Estadisticas descriptivas de los datos
def descripcion_datos():
  for item in range(5):
    aux = Lista[item]
    print("\nResultados de la estadistica descriptiva de",aux)
    valor_max(aux)
    valor_min(aux)
    promedio(aux)
    mediana(aux)
    varianza(aux)
    moda(aux)


#Mapeo para cambiar los valores
mapeo = {
    #A,B,C,D,E,F = datos de Warehouse_block
    #Ship, Flight, Road = datos de Mode_of_Shipment
    #low,medium,high = datos de Product_importance
    #F,M = datos de Gender
    'A': 1,
    'B': 2,
    'C': 3,
    'D': 4,
    'E': 5,
    'F': 0,
    'M': 1,
    'Ship': 1,
    'Flight': 2,
    'Road': 3,
    'low': 0,
    'medium': 1,
    'high': 2
}


#Funcion para cambiar los datos cualitativos
def cambiar_datos_cualitativos(archivo_entrada, archivo_salida, mapeo):
  with open(archivo_entrada, 'r') as archivo_in, open(archivo_salida, 'w', newline='') as archivo_out:
   
    lector_csv = csv.reader(archivo_in)
    escritor_csv = csv.writer(archivo_out)
       
    for fila in lector_csv:
      nueva_fila = []
      for dato in fila:
        if dato in mapeo:
          nueva_fila.append(mapeo[dato])
        else:
          nueva_fila.append(dato)
      escritor_csv.writerow(nueva_fila)
 
#Funcion para leer los archivos csv  
def leer(nombre_archivo):
  df = pd.read_csv(nombre_archivo)
  print(df)
#Funcion para machine learning
def s_menu():
    opt = int(input(
      "\nMenu predecir datos\n" +
      "El modelo ya a sido entrenado desea: \n" +
      "1.  Valores del modelo\n" +
      "2.  Predecir datos\n" +
      "3.  Generar archivo con las predicciones\n" +
      "4.  Graficos\n" +
      "5.  Salir\n" +
      "Elija una Opcion = "))
    return opt


def machine_l():#
  opcion2 = 0
  df = pd.read_csv(archivo_salida)

  var_indepen = [importancia]
  var_depen = [envio]

  X=df[var_indepen].values
  y=df[var_depen].values
 
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=2)#Separamos los datos en entrenamiento (80%) y prueba (20%)

  scaler = StandardScaler()
  X_train_scaled = scaler.fit_transform(X_train)
  X_test_scaled = scaler.fit_transform(X_test)


  clf = MLPClassifier(solver='adam',alpha=1e-4,learning_rate_init=0.00001,hidden_layer_sizes=(1,6,10),max_iter=1000)
  clf.fit(X_train_scaled,np.ravel(y_train))

  ScoreTrain = clf.score(X_train,np.ravel(y_train))
  ScoreTest = clf.score(X_test,np.ravel(y_test))
  

  y_pred = clf.predict(X_test)
  error=mean_squared_error(y_test,y_pred)
  r2 = r2_score(y_test,y_pred)
  
  fig, ax = plt.subplots()
  ax.hist(y_test,color='tab:purple')
  ax.hist(y_pred,color='tab:green')
  ax.set_title('y testeado v/s y predecidos', loc = "left", fontdict = {'fontsize':14, 'fontweight':'bold', 'color':'tab:blue'})
  ax.set_ylabel("Cantidad")
  
  while opcion2 != 5:
    opcion2 = s_menu()
    if opcion2 == 1:
      print("\nPuntuacion del entrenamiento: ", ScoreTrain)
      print("\nPuntuacion de las pruebas: ", ScoreTest)
      print("\nError cuadratico medio: ",error)
      print("\nValor r^2: ",r2)

    if opcion2 == 2:
      print("\nDatos predecidos: ", y_pred)
    if opcion2 == 3:
      with open(archivo_datos,'w',newline= '') as datos_fuera:
        escritor = csv.writer(datos_fuera)
        escritor.writerow(y_pred)
      print("\nLos datos han sido escritos a", archivo_datos)
    if opcion2 == 4:
      plt.show()
    if opcion2 == 5:
      exit() 
    if opcion2 > 5:
      print("Opcion invalida")


#Menu
def menu():
    opc = int(input(
      "Menu Principal \n" +
      "1.  Descripcion de datos\n" +
      "2.  Cambiar datos\n" +
      "3.  Predecir datos\n" +
      "4.  Salir\n" +
      "Elija una Opcion = "))
    return opc


while opcion != 4:
    opcion = menu()
    if opcion == 1:
      descripcion_datos()
      print("\n")
    if opcion == 2:
      cambiar_datos_cualitativos(archivo_entrada, archivo_salida, mapeo)
      print("\nArchivo original:")
      leer(archivo_entrada)
      print("\nArchivo modificado:")
      leer(archivo_salida)
    if opcion == 3:
      machine_l()
    if opcion > 4:
      print("Opcion invalida")
      exit
